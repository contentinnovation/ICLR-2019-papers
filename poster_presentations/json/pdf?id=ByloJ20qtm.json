{
    "filename": "pdf.pdf",
    "metadata": {
        "title": "NEURAL PROGRAM REPAIR BY JOINTLY LEARNING TO LOCALIZE AND REPAIR",
        "author": "Marko Vasic, Aditya Kanade, Petros Maniatis, David Bieber, Rishabh Singh, 1Google Brain, USA 2University of Texas at Austin, USA 3IISc Bangalore, India vasic@utexas.edu {akanade,maniatis,dbieber,rising}@google.com",
        "date": 2019,
        "identifiers": {
            "url": "https://openreview.net/pdf?id=ByloJ20qtm"
        },
        "abstract": "Due to its potential to improve programmer productivity and software quality, automated program repair has been an active topic of research. Newer techniques harness neural networks to learn directly from examples of buggy programs and their fixes. In this work, we consider a recently identified class of bugs called variable-misuse bugs. The state-of-the-art solution for variable misuse enumerates potential fixes for all possible bug locations in a program, before selecting the best prediction. We show that it is beneficial to train a model that jointly and directly localizes and repairs variable-misuse bugs. We present multi-headed pointer networks for this purpose, with one head each for localization and repair. The experimental results show that the joint model significantly outperforms an enumerative solution that uses a pointer based model for repair alone."
    },
    "keywords": [
        {
            "term": "automatic software repair",
            "url": "https://en.wikipedia.org/wiki/automatic_software_repair"
        },
        {
            "term": "neural network",
            "url": "https://en.wikipedia.org/wiki/neural_network"
        }
    ],
    "abbreviations": {},
    "highlights": [
        "Advances in machine learning and the availability of large corpora of source code have led to growing interest in the development of neural representations of programs for performing program analyses",
        "Our results show that the joint model not only achieves a higher classification, localization, and repair accuracy, but results in high true positive score",
        "We study how a pointer network on top of a recurrent neural network compares to the graph neural network used previously by <a class=\"ref-link\" id=\"cAllamanis_et+al_2018_a\" href=\"#rAllamanis_et+al_2018_a\">Allamanis et al (2018</a>)",
        "Our approach deviates in three primary ways from that earlier one: 1) it uses a pointer network on top of an RNN encoder rather than a graph neural network, 2) it does separate but joint bug localization and repair rather than using repair-only enumeratively to solve the same task, and 3) it applies to syntactic program information only rather than syntax and semantics",
        "We present an approach that jointly learns to localize and repair bugs",
        "We use a key insight of the VARMISUSE problem that both the bug and repair must exist in the original program to design a multi-headed pointer model over a sequential encoding of program token sequences"
    ],
    "key_statements": [
        "Advances in machine learning and the availability of large corpora of source code have led to growing interest in the development of neural representations of programs for performing program analyses",
        "Our results show that the joint model not only achieves a higher classification, localization, and repair accuracy, but results in high true positive score",
        "We study how a pointer network on top of a recurrent neural network compares to the graph neural network used previously by <a class=\"ref-link\" id=\"cAllamanis_et+al_2018_a\" href=\"#rAllamanis_et+al_2018_a\">Allamanis et al (2018</a>)",
        "Our approach deviates in three primary ways from that earlier one: 1) it uses a pointer network on top of an RNN encoder rather than a graph neural network, 2) it does separate but joint bug localization and repair rather than using repair-only enumeratively to solve the same task, and 3) it applies to syntactic program information only rather than syntax and semantics",
        "We present an approach that jointly learns to localize and repair bugs",
        "We use a key insight of the VARMISUSE problem that both the bug and repair must exist in the original program to design a multi-headed pointer model over a sequential encoding of program token sequences"
    ],
    "summary": [
        "Advances in machine learning and the availability of large corpora of source code have led to growing interest in the development of neural representations of programs for performing program analyses.",
        "<a class=\"ref-link\" id=\"cAllamanis_et+al_2018_a\" href=\"#rAllamanis_et+al_2018_a\">Allamanis et al (2018</a>) proposed an enumerative approach for solving the VARMISUSE problem by making individual predictions for each variable use in a program and reporting back all variable discrepancies above a threshold, using a graph neural network on syntactic and semantic information.",
        "Unlike our approach, which can generate VARMISUSE repairs using a pointer mechanism, the Sk p model would need to predict full program statements for repairing such bugs.",
        "We use pointer-network models to perform joint prediction of both the location and the repair for VARMISUSE bugs.",
        "Is the joint prediction model VARMISUSEREPAIR effective in finding VARMISUSE bugs in programs and how does it compare against the enumerative solution (Section 4.1)?",
        "We first train a pointer network model Mr to only predict repairs for a given program and slot.",
        "As discussed earlier, the enumerative approaches require making O(n) predictions at inference time, where n denotes the number of variable-use locations in a program.",
        "We apply this repair-only model to a test dataset in which, in addition to creating a prediction problem for a slot, we randomly select one other variable use in the program and replace its variable with an incorrect in-scope variable, thereby introducing a VARMISUSE bug away from the slot of the prediction problem.",
        "We generate two datasets: AddBugAny, in which the injected VARMISUSE bug is at a random location, and AddBugNear, in which the injection happens within two variable-use locations from the slot, and in the first 30 program tokens; we consider the latter a tougher, more adversarial case for this experiment.",
        "Our approach deviates in three primary ways from that earlier one: 1) it uses a pointer network on top of an RNN encoder rather than a graph neural network, 2) it does separate but joint bug localization and repair rather than using repair-only enumeratively to solve the same task, and 3) it applies to syntactic program information only rather than syntax and semantics.",
        "These are promising results on data collected from real developer histories and in aggregate, our joint model could localize and repair 727 variable misuse instances on this dataset.",
        "We use a key insight of the VARMISUSE problem that both the bug and repair must exist in the original program to design a multi-headed pointer model over a sequential encoding of program token sequences.",
        "We want to explore joint localization and repair using other models such as graph models and combinations of pointer and graph models, possibly with using more semantic information about programs"
    ],
    "headline": "We show that it is beneficial to train a model that jointly and directly localizes and repairs variable-misuse bugs",
    "reference_links": [
        {
            "id": "Allamanis_et+al_2018_a",
            "entry": "Miltiadis Allamanis, Marc Brockschmidt, and Mahmoud Khademi. Learning to represent programs with graphs. In International Conference on Learning Representations, 2018.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Allamanis%2C%20Miltiadis%20Brockschmidt%2C%20Marc%20Khademi%2C%20Mahmoud%20Learning%20to%20represent%20programs%20with%20graphs%202018",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Allamanis%2C%20Miltiadis%20Brockschmidt%2C%20Marc%20Khademi%2C%20Mahmoud%20Learning%20to%20represent%20programs%20with%20graphs%202018"
        },
        {
            "id": "Bhatia_et+al_2018_a",
            "entry": "Sahil Bhatia, Pushmeet Kohli, and Rishabh Singh. Neuro-symbolic program corrector for introductory programming assignments. In Proceedings of the 40th International Conference on Software Engineering, ICSE 2018, Gothenburg, Sweden, May 27 - June 03, 2018, pp. 60\u201370, 2018.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Bhatia%2C%20Sahil%20Kohli%2C%20Pushmeet%20Singh%2C%20Rishabh%20Neuro-symbolic%20program%20corrector%20for%20introductory%20programming%20assignments%202018-05-27",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Bhatia%2C%20Sahil%20Kohli%2C%20Pushmeet%20Singh%2C%20Rishabh%20Neuro-symbolic%20program%20corrector%20for%20introductory%20programming%20assignments%202018-05-27"
        },
        {
            "id": "Bunel_et+al_2017_a",
            "entry": "Rudy Bunel, Alban Desmaison, M. Pawan Kumar, Philip H. S. Torr, and Pushmeet Kohli. Learning to superoptimize programs. In International Conference on Learning Representations, 2017.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Bunel%2C%20Rudy%20Alban%20Desmaison%2C%20M.Pawan%20Kumar%20Torr%2C%20Philip%20H.S.%20Kohli%2C%20Pushmeet%20Learning%20to%20superoptimize%20programs%202017",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Bunel%2C%20Rudy%20Alban%20Desmaison%2C%20M.Pawan%20Kumar%20Torr%2C%20Philip%20H.S.%20Kohli%2C%20Pushmeet%20Learning%20to%20superoptimize%20programs%202017"
        },
        {
            "id": "Cai_et+al_2017_a",
            "entry": "Jonathon Cai, Richard Shin, and Dawn Song. Making neural programming architectures generalize via recursion. In International Conference on Learning Representations, 2017.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Cai%2C%20Jonathon%20Shin%2C%20Richard%20Song%2C%20Dawn%20Making%20neural%20programming%20architectures%20generalize%20via%20recursion%202017",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Cai%2C%20Jonathon%20Shin%2C%20Richard%20Song%2C%20Dawn%20Making%20neural%20programming%20architectures%20generalize%20via%20recursion%202017"
        },
        {
            "id": "Devlin_et+al_2017_a",
            "entry": "Jacob Devlin, Jonathan Uesato, Surya Bhupatiraju, Rishabh Singh, Abdel-rahman Mohamed, and Pushmeet Kohli. Robustfill: Neural program learning under noisy I/O. In Proceedings of the 34th International Conference on Machine Learning, ICML 2017, Sydney, NSW, Australia, 6-11 August 2017, pp. 990\u2013998, 2017a.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Devlin%2C%20Jacob%20Uesato%2C%20Jonathan%20Bhupatiraju%2C%20Surya%20Singh%2C%20Rishabh%20Robustfill%3A%20Neural%20program%20learning%20under%20noisy%20I/O%202017-08",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Devlin%2C%20Jacob%20Uesato%2C%20Jonathan%20Bhupatiraju%2C%20Surya%20Singh%2C%20Rishabh%20Robustfill%3A%20Neural%20program%20learning%20under%20noisy%20I/O%202017-08"
        },
        {
            "id": "Devlin_et+al_0000_a",
            "entry": "Jacob Devlin, Jonathan Uesato, Rishabh Singh, and Pushmeet Kohli. Semantic code repair using neuro-symbolic transformation networks. CoRR, abs/1710.11054, 2017b.",
            "arxiv_url": "https://arxiv.org/pdf/1710.11054"
        },
        {
            "id": "Engler_et+al_2001_a",
            "entry": "Dawson R. Engler, David Yu Chen, and Andy Chou. Bugs as inconsistent behavior: A general approach to inferring errors in systems code. In Proceedings of the 18th ACM Symposium on Operating System Principles, SOSP 2001, Chateau Lake Louise, Banff, Alberta, Canada, October 21-24, 2001, pp. 57\u201372, 2001.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Engler%2C%20Dawson%20R.%20Chen%2C%20David%20Yu%20Chou%2C%20Andy%20Bugs%20as%20inconsistent%20behavior%3A%20A%20general%20approach%20to%20inferring%20errors%20in%20systems%20code%202001-10-21",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Engler%2C%20Dawson%20R.%20Chen%2C%20David%20Yu%20Chou%2C%20Andy%20Bugs%20as%20inconsistent%20behavior%3A%20A%20general%20approach%20to%20inferring%20errors%20in%20systems%20code%202001-10-21"
        },
        {
            "id": "Gazzola_et+al_2018_a",
            "entry": "L. Gazzola, D. Micucci, and L. Mariani. Automatic software repair: A survey. IEEE Transactions on Software Engineering, pp. 1\u20131, 2018.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Gazzola%2C%20L.%20Micucci%2C%20D.%20Mariani%2C%20L.%20Automatic%20software%20repair%3A%20A%20survey%202018",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Gazzola%2C%20L.%20Micucci%2C%20D.%20Mariani%2C%20L.%20Automatic%20software%20repair%3A%20A%20survey%202018"
        },
        {
            "id": "Gilmer_et+al_2017_a",
            "entry": "Justin Gilmer, Samuel S Schoenholz, Patrick F Riley, Oriol Vinyals, and George E Dahl. Neural Message Passing for Quantum Chemistry. In Proceedings of the 34th International Conference on Machine Learning-Volume 70, pp. 1263\u20131272. JMLR. org, 2017.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Gilmer%2C%20Justin%20Schoenholz%2C%20Samuel%20S.%20Riley%2C%20Patrick%20F.%20Vinyals%2C%20Oriol%20Neural%20Message%20Passing%20for%20Quantum%20Chemistry%202017",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Gilmer%2C%20Justin%20Schoenholz%2C%20Samuel%20S.%20Riley%2C%20Patrick%20F.%20Vinyals%2C%20Oriol%20Neural%20Message%20Passing%20for%20Quantum%20Chemistry%202017"
        },
        {
            "id": "Goues_et+al_2015_a",
            "entry": "C. Le Goues, N. Holtschulte, E. K. Smith, Y. Brun, P. Devanbu, S. Forrest, and W. Weimer. The manybugs and introclass benchmarks for automated repair of c programs. IEEE Transactions on Software Engineering, 41(12):1236\u20131256, 2015.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Goues%2C%20C.Le%20Holtschulte%2C%20N.%20Smith%2C%20E.K.%20Brun%2C%20Y.%20The%20manybugs%20and%20introclass%20benchmarks%20for%20automated%20repair%20of%20c%20programs%202015",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Goues%2C%20C.Le%20Holtschulte%2C%20N.%20Smith%2C%20E.K.%20Brun%2C%20Y.%20The%20manybugs%20and%20introclass%20benchmarks%20for%20automated%20repair%20of%20c%20programs%202015"
        },
        {
            "id": "Gupta_et+al_2017_a",
            "entry": "Rahul Gupta, Soham Pal, Aditya Kanade, and Shirish K. Shevade. Deepfix: Fixing common C language errors by deep learning. In Proceedings of the Thirty-First AAAI Conference on Artificial Intelligence, February 4-9, 2017, San Francisco, California, USA., pp. 1345\u20131351, 2017.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Gupta%2C%20Rahul%20Pal%2C%20Soham%20Kanade%2C%20Aditya%20Shevade%2C%20Shirish%20K.%20Deepfix%3A%20Fixing%20common%20C%20language%20errors%20by%20deep%20learning%202017-02",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Gupta%2C%20Rahul%20Pal%2C%20Soham%20Kanade%2C%20Aditya%20Shevade%2C%20Shirish%20K.%20Deepfix%3A%20Fixing%20common%20C%20language%20errors%20by%20deep%20learning%202017-02"
        },
        {
            "id": "Hochreiter_1997_a",
            "entry": "Sepp Hochreiter and Jurgen Schmidhuber. Long short-term memory. Neural Computation, 9(8): 1735\u20131780, 1997.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Hochreiter%2C%20Sepp%20Schmidhuber%2C%20Jurgen%20Long%20short-term%20memory%201997",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Hochreiter%2C%20Sepp%20Schmidhuber%2C%20Jurgen%20Long%20short-term%20memory%201997"
        },
        {
            "id": "Just_et+al_2014_a",
            "entry": "Rene Just, Darioush Jalali, and Michael D. Ernst. Defects4j: A database of existing faults to enable controlled testing studies for java programs. In Proceedings of the 2014 International Symposium on Software Testing and Analysis, pp. 437\u2013440, 2014.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Just%2C%20Rene%20Jalali%2C%20Darioush%20Ernst%2C%20Michael%20D.%20Defects4j%3A%20A%20database%20of%20existing%20faults%20to%20enable%20controlled%20testing%20studies%20for%20java%20programs%202014",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Just%2C%20Rene%20Jalali%2C%20Darioush%20Ernst%2C%20Michael%20D.%20Defects4j%3A%20A%20database%20of%20existing%20faults%20to%20enable%20controlled%20testing%20studies%20for%20java%20programs%202014"
        },
        {
            "id": "Goues_et+al_2012_a",
            "entry": "Claire Le Goues, ThanhVu Nguyen, Stephanie Forrest, and Westley Weimer. GenProg: A Generic Method for Automatic Software Repair. IEEE Trans. Software Eng., 38(1):54\u201372, 2012.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Goues%2C%20Claire%20Le%20Nguyen%2C%20ThanhVu%20Forrest%2C%20Stephanie%20Weimer%2C%20Westley%20GenProg%3A%20A%20Generic%20Method%20for%20Automatic%20Software%20Repair%202012",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Goues%2C%20Claire%20Le%20Nguyen%2C%20ThanhVu%20Forrest%2C%20Stephanie%20Weimer%2C%20Westley%20GenProg%3A%20A%20Generic%20Method%20for%20Automatic%20Software%20Repair%202012"
        },
        {
            "id": "Monperrus_2018_a",
            "entry": "Martin Monperrus. Automatic software repair: A bibliography. ACM Comput. Surv., 51(1):17:1\u2013 17:24, 2018.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Monperrus%2C%20Martin%20Automatic%20software%20repair%3A%20A%20bibliography%202018",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Monperrus%2C%20Martin%20Automatic%20software%20repair%3A%20A%20bibliography%202018"
        },
        {
            "id": "Motwani_et+al_2018_a",
            "entry": "Manish Motwani, Sandhya Sankaranarayanan, Rene Just, and Yuriy Brun. Do automated program repair techniques repair hard and important bugs? Empirical Software Engineering, 23(5):2901\u2013 2947, 2018.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Motwani%2C%20Manish%20Sankaranarayanan%2C%20Sandhya%20Just%2C%20Rene%20Brun%2C%20Yuriy%20Do%20automated%20program%20repair%20techniques%20repair%20hard%20and%20important%20bugs%3F%202018",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Motwani%2C%20Manish%20Sankaranarayanan%2C%20Sandhya%20Just%2C%20Rene%20Brun%2C%20Yuriy%20Do%20automated%20program%20repair%20techniques%20repair%20hard%20and%20important%20bugs%3F%202018"
        },
        {
            "id": "Mou_et+al_2016_a",
            "entry": "Lili Mou, Ge Li, Lu Zhang, Tao Wang, and Zhi Jin. Convolutional neural networks over tree structures for programming language processing. In Proceedings of the Thirtieth AAAI Conference on Artificial Intelligence, February 12-17, 2016, Phoenix, Arizona, USA., pp. 1287\u20131293, 2016.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Mou%2C%20Lili%20Li%2C%20Ge%20Zhang%2C%20Lu%20Wang%2C%20Tao%20Convolutional%20neural%20networks%20over%20tree%20structures%20for%20programming%20language%20processing%202016-02",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Mou%2C%20Lili%20Li%2C%20Ge%20Zhang%2C%20Lu%20Wang%2C%20Tao%20Convolutional%20neural%20networks%20over%20tree%20structures%20for%20programming%20language%20processing%202016-02"
        },
        {
            "id": "Parisotto_et+al_2017_a",
            "entry": "Emilio Parisotto, Abdel-rahman Mohamed, Rishabh Singh, Lihong Li, Dengyong Zhou, and Pushmeet Kohli. Neuro-symbolic program synthesis. In International Conference on Learning Representations, 2017.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Parisotto%2C%20Emilio%20Mohamed%2C%20Abdel-rahman%20Singh%2C%20Rishabh%20Li%2C%20Lihong%20Neuro-symbolic%20program%20synthesis%202017",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Parisotto%2C%20Emilio%20Mohamed%2C%20Abdel-rahman%20Singh%2C%20Rishabh%20Li%2C%20Lihong%20Neuro-symbolic%20program%20synthesis%202017"
        },
        {
            "id": "Piech_et+al_2015_a",
            "entry": "Chris Piech, Jonathan Huang, Andy Nguyen, Mike Phulsuksombati, Mehran Sahami, and Leonidas Guibas. Learning program embeddings to propagate feedback on student code. In International Conference on Machine Learning, pp. 1093\u20131102, 2015.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Piech%2C%20Chris%20Huang%2C%20Jonathan%20Nguyen%2C%20Andy%20Phulsuksombati%2C%20Mike%20Learning%20program%20embeddings%20to%20propagate%20feedback%20on%20student%20code%202015",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Piech%2C%20Chris%20Huang%2C%20Jonathan%20Nguyen%2C%20Andy%20Phulsuksombati%2C%20Mike%20Learning%20program%20embeddings%20to%20propagate%20feedback%20on%20student%20code%202015"
        },
        {
            "id": "Pradel_2018_a",
            "entry": "Michael Pradel and Koushik Sen. Deepbugs: a learning approach to name-based bug detection. PACMPL, 2(OOPSLA):147:1\u2013147:25, 2018.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Pradel%2C%20Michael%20Sen%2C%20Koushik%20Deepbugs%3A%20a%20learning%20approach%20to%20name-based%20bug%20detection%202018",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Pradel%2C%20Michael%20Sen%2C%20Koushik%20Deepbugs%3A%20a%20learning%20approach%20to%20name-based%20bug%20detection%202018"
        },
        {
            "id": "Pu_et+al_2016_a",
            "entry": "Yewen Pu, Karthik Narasimhan, Armando Solar-Lezama, and Regina Barzilay. sk p: a neural program corrector for moocs. In Companion Proceedings of the 2016 ACM SIGPLAN International Conference on Systems, Programming, Languages and Applications: Software for Humanity, SPLASH 2016, Amsterdam, Netherlands, October 30 - November 4, 2016, pp. 39\u201340, 2016.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Pu%2C%20Yewen%20Narasimhan%2C%20Karthik%20Solar-Lezama%2C%20Armando%20Barzilay%2C%20Regina%20sk%20p%3A%20a%20neural%20program%20corrector%20for%20moocs%202016-10-30",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Pu%2C%20Yewen%20Narasimhan%2C%20Karthik%20Solar-Lezama%2C%20Armando%20Barzilay%2C%20Regina%20sk%20p%3A%20a%20neural%20program%20corrector%20for%20moocs%202016-10-30"
        },
        {
            "id": "Raychev_et+al_2016_a",
            "entry": "Veselin Raychev, Pavol Bielik, and Martin T. Vechev. Probabilistic model for code with decision trees. In Proceedings of the 2016 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications, OOPSLA 2016, part of SPLASH 2016, Amsterdam, The Netherlands, October 30 - November 4, 2016, pp. 731\u2013747, 2016.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Raychev%2C%20Veselin%20Bielik%2C%20Pavol%20Vechev%2C%20Martin%20T.%20Probabilistic%20model%20for%20code%20with%20decision%20trees%202016-10-30",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Raychev%2C%20Veselin%20Bielik%2C%20Pavol%20Vechev%2C%20Martin%20T.%20Probabilistic%20model%20for%20code%20with%20decision%20trees%202016-10-30"
        },
        {
            "id": "Reed_2015_a",
            "entry": "Scott E. Reed and Nando de Freitas. Neural programmer-interpreters. CoRR, abs/1511.06279, 2015.",
            "arxiv_url": "https://arxiv.org/pdf/1511.06279"
        },
        {
            "id": "Rocktaschel_et+al_2016_a",
            "entry": "Tim Rocktaschel, Edward Grefenstette, Karl Moritz Hermann, Tomas Kocisky, and Phil Blunsom. Reasoning about entailment with neural attention. In International Conference on Learning Representations, 2016.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Rocktaschel%2C%20Tim%20Grefenstette%2C%20Edward%20Hermann%2C%20Karl%20Moritz%20Kocisky%2C%20Tomas%20Reasoning%20about%20entailment%20with%20neural%20attention%202016",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Rocktaschel%2C%20Tim%20Grefenstette%2C%20Edward%20Hermann%2C%20Karl%20Moritz%20Kocisky%2C%20Tomas%20Reasoning%20about%20entailment%20with%20neural%20attention%202016"
        },
        {
            "id": "Vechev_2016_a",
            "entry": "Martin T. Vechev and Eran Yahav. Programming with \u201dbig code\u201d. Foundations and Trends in Programming Languages, 3(4):231\u2013284, 2016.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Vechev%2C%20Martin%20T.%20Yahav%2C%20Eran%20Programming%20with%E2%80%9Dbig%20code%E2%80%9D%202016",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Vechev%2C%20Martin%20T.%20Yahav%2C%20Eran%20Programming%20with%E2%80%9Dbig%20code%E2%80%9D%202016"
        },
        {
            "id": "Vinyals_et+al_2015_a",
            "entry": "Oriol Vinyals, Meire Fortunato, and Navdeep Jaitly. Pointer networks. In Advances in Neural Information Processing Systems 28: Annual Conference on Neural Information Processing Systems 2015, December 7-12, 2015, Montreal, Quebec, Canada, pp. 2692\u20132700, 2015.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Vinyals%2C%20Oriol%20Fortunato%2C%20Meire%20Jaitly%2C%20Navdeep%20Pointer%20networks%202015-12-07",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Vinyals%2C%20Oriol%20Fortunato%2C%20Meire%20Jaitly%2C%20Navdeep%20Pointer%20networks%202015-12-07"
        },
        {
            "id": "Wang_et+al_2018_a",
            "entry": "Ke Wang, Rishabh Singh, and Zhendong Su. Dynamic neural program embedding for program repair. In International Conference on Learning Representations, 2018.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Wang%2C%20Ke%20Singh%2C%20Rishabh%20Su%2C%20Zhendong%20Dynamic%20neural%20program%20embedding%20for%20program%20repair%202018",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Wang%2C%20Ke%20Singh%2C%20Rishabh%20Su%2C%20Zhendong%20Dynamic%20neural%20program%20embedding%20for%20program%20repair%202018"
        }
    ]
}
