{
    "filename": "pdf.pdf",
    "metadata": {
        "date": 2019,
        "title": "MAXIMAL DIVERGENCE SEQUENTIAL AUTOENCODER FOR BINARY SOFTWARE VULNERABILITY DETECTION\u2217",
        "author": "Tue Le \u2020, Tuan Nguyen \u2020 AI Research Lab, Trusting Social, Australia {tue.le, tuan.nguyen}@trustingsocial.com",
        "identifiers": {
            "url": "https://openreview.net/pdf?id=ByloIiCqYQ"
        },
        "abstract": "Due to the sharp increase in the severity of the threat imposed by software vulnerabilities, the detection of vulnerabilities in binary code has become an important concern in the software industry, such as the embedded systems industry, and in the field of computer security. However, most of the works in binary code vulnerability detection has relied on handcrafted features which are manually chosen by a select few domain experts. In this paper, we attempt to alleviate this severe binary vulnerability detection bottleneck by leveraging recent advances in deep learning representations and propose the Maximal Divergence Sequential Auto-Encoder. In particular, latent codes representing vulnerable and non-vulnerable binaries are encouraged to be maximally divergent, while still being able to maintain crucial information from the original binaries. We conducted extensive experiments to compare and contrast our proposed methods with the baselines, and the results indicate that our proposed methods outperform the baselines in all performance measures of interest."
    },
    "keywords": [
        {
            "term": "computer software",
            "url": "https://en.wikipedia.org/wiki/computer_software"
        },
        {
            "term": "Recurrent Neural Network",
            "url": "https://en.wikipedia.org/wiki/Recurrent_Neural_Network"
        },
        {
            "term": "machine learning",
            "url": "https://en.wikipedia.org/wiki/machine_learning"
        },
        {
            "term": "computer security",
            "url": "https://en.wikipedia.org/wiki/computer_security"
        },
        {
            "term": "software vulnerability",
            "url": "https://en.wikipedia.org/wiki/software_vulnerability"
        },
        {
            "term": "software security",
            "url": "https://en.wikipedia.org/wiki/software_security"
        },
        {
            "term": "software industry",
            "url": "https://en.wikipedia.org/wiki/software_industry"
        },
        {
            "term": "performance measure",
            "url": "https://en.wikipedia.org/wiki/performance_measure"
        },
        {
            "term": "binary code",
            "url": "https://en.wikipedia.org/wiki/binary_code"
        }
    ],
    "abbreviations": {
        "SVD": "Software vulnerability detection",
        "RNN": "Recurrent Neural Network",
        "VAE": "Variational Auto-Encoder",
        "MDSAE": "MAXIMAL DIVERGENCE SEQUENTIAL AUTO-ENCODER",
        "BRNN": "Bidirectional RNN"
    },
    "highlights": [
        "Software vulnerabilities are specific flaws or oversights in a piece of software that allow attackers to perform malicious acts including exposing or altering sensitive information, disrupting or destroying a system, or taking control of a computer system or program (<a class=\"ref-link\" id=\"cDowd_et+al_2006_a\" href=\"#rDowd_et+al_2006_a\"><a class=\"ref-link\" id=\"cDowd_et+al_2006_a\" href=\"#rDowd_et+al_2006_a\">Dowd et al, 2006</a></a>)",
        "Due to the ubiquity of computer software, the growth and the diversity in its development process, a great amount of computer software potentially includes software vulnerabilities. This fact makes the problem of software security vulnerability identification an important concern in the software industry and in the field of computer security",
        "We view a given binary as a sequence of machine instructions and use the theory of Variational Auto-Encoders (VAE) (<a class=\"ref-link\" id=\"cKingma_2013_a\" href=\"#rKingma_2013_a\">Kingma & Welling, 2013</a>) to develop the Maximal Divergence Sequential Auto-Encoder (MDSAE) that can work out representations of binary code in such a way that representations of vulnerable and nonvulnerable binaries are encouraged to be maximally different for vulnerability detection purposes, 1https://cve.mitre.org/",
        "We propose a novel method named Maximal Divergence Sequential Auto-Encoder (MDSAE) that leverages recent advances in deep learning representation for binary code vulnerability detection",
        "In the field of computer security, the recall is a very important measure of completeness since a higher recall value leads to fewer vulnerable functions being incorrectly classified as non-vulnerable, which can otherwise present an issue for code auditors when there can be a large imbalance in the number of non-vulnerable and vulnerable functions in\n4https://github.com/dascimal-org/MDSeqVAE",
        "The detection of vulnerabilities in binary code is an important problem in the software industry and in the field of computer security"
    ],
    "key_statements": [
        "Software vulnerabilities are specific flaws or oversights in a piece of software that allow attackers to perform malicious acts including exposing or altering sensitive information, disrupting or destroying a system, or taking control of a computer system or program (<a class=\"ref-link\" id=\"cDowd_et+al_2006_a\" href=\"#rDowd_et+al_2006_a\"><a class=\"ref-link\" id=\"cDowd_et+al_2006_a\" href=\"#rDowd_et+al_2006_a\">Dowd et al, 2006</a></a>)",
        "Due to the ubiquity of computer software, the growth and the diversity in its development process, a great amount of computer software potentially includes software vulnerabilities. This fact makes the problem of software security vulnerability identification an important concern in the software industry and in the field of computer security",
        "We view a given binary as a sequence of machine instructions and use the theory of Variational Auto-Encoders (VAE) (<a class=\"ref-link\" id=\"cKingma_2013_a\" href=\"#rKingma_2013_a\">Kingma & Welling, 2013</a>) to develop the Maximal Divergence Sequential Auto-Encoder (MDSAE) that can work out representations of binary code in such a way that representations of vulnerable and nonvulnerable binaries are encouraged to be maximally different for vulnerability detection purposes, 1https://cve.mitre.org/",
        "We propose a novel method named Maximal Divergence Sequential Auto-Encoder (MDSAE) that leverages recent advances in deep learning representation for binary code vulnerability detection",
        "In the field of computer security, the recall is a very important measure of completeness since a higher recall value leads to fewer vulnerable functions being incorrectly classified as non-vulnerable, which can otherwise present an issue for code auditors when there can be a large imbalance in the number of non-vulnerable and vulnerable functions in\n4https://github.com/dascimal-org/MDSeqVAE",
        "The detection of vulnerabilities in binary code is an important problem in the software industry and in the field of computer security",
        "The experimental results show that our proposed methods outperform the baselines in all performance measures of interest"
    ],
    "summary": [
        "Software vulnerabilities are specific flaws or oversights in a piece of software that allow attackers to perform malicious acts including exposing or altering sensitive information, disrupting or destroying a system, or taking control of a computer system or program (<a class=\"ref-link\" id=\"cDowd_et+al_2006_a\" href=\"#rDowd_et+al_2006_a\"><a class=\"ref-link\" id=\"cDowd_et+al_2006_a\" href=\"#rDowd_et+al_2006_a\">Dowd et al, 2006</a></a>).",
        "We view a given binary as a sequence of machine instructions and use the theory of Variational Auto-Encoders (VAE) (<a class=\"ref-link\" id=\"cKingma_2013_a\" href=\"#rKingma_2013_a\">Kingma & Welling, 2013</a>) to develop the Maximal Divergence Sequential Auto-Encoder (MDSAE) that can work out representations of binary code in such a way that representations of vulnerable and nonvulnerable binaries are encouraged to be maximally different for vulnerability detection purposes, 1https://cve.mitre.org/",
        "Based on the VAE principle, latent codes are absorbed into the data prior distribution, we further propose maximizing a divergence (e.g., Wasserstein (WS) distance or Kullback-Leibler (KL) divergence) between these two priors to separate representations of vulnerable and non-vulnerable binaries.",
        "We propose a novel method named Maximal Divergence Sequential Auto-Encoder (MDSAE) that leverages recent advances in deep learning representation for binary code vulnerability detection.",
        "To maximize the difference between the encodings of data in the two classes, we propose to maximize the divergence between p0 (z) and p1 (z) and arrive the following optimization problem: max Ex:y=0 L0 (x; \u03b8, \u03c6) + Ex:y=1 L1 (x; \u03b8, \u03c6) + \u03b1D p0 (z) p1 (z)",
        "Distances between Two Priors, Distributions of Vulnerable, Non-vulnerable Classes During Training In this experiment, we study i) the L2 WS distance between the two priors, ii) the Euclidean distance of two means of priors (i.e., \u03bc0 \u2212 \u03bc1 ), iii) the KL divergence of q\u03c6 (z | hL, y = 0) and p0 (z) (i.e., DKL q\u03c6 (z | hL, y = 0) p0 (z) ), iv) the KL divergence of q\u03c6 (z | hL, y = 1) and p1 (z) (i.e., DKL q\u03c6 (z | hL, y = 1) p1 (z) ), v) the Maximum Mean Discrepancy (MMD) distance (<a class=\"ref-link\" id=\"cGretton_et+al_2012_a\" href=\"#rGretton_et+al_2012_a\">Gretton et al, 2012</a>) of q\u03c6 (z | hL, y = 0) and q\u03c6 (z | hL, y = 1), and vi) the reconstruction loss across epochs of MDSAE-RWS\u2013 the variant of our proposed method for learning separable representations.",
        "As shown in Figure 3, during the training process, two distributions p (z | y = 0) and p (z | y = 1) become consistently and gradually more distant with the increase in their MMD distance (Figure 3, second row, middle), implying the gradually increasing separation of the corresponding latent codes.",
        "We leverage recent advances in deep learning representation to propose the Maximal Divergence Sequential Auto-Encoder for binary vulnerability detection.",
        "The experimental results show that our proposed methods outperform the baselines in all performance measures of interest"
    ],
    "headline": "In contrast to the original Variational Auto-Encoder wherein the data prior is kept fixed, we propose using two learnable Gaussian priors, one for each class",
    "reference_links": [
        {
            "id": "Abadi_et+al_2016_a",
            "entry": "M. Abadi, P. Barham, J. Chen, Z. Chen, A. Davis, J. Dean, M. Devin, S. Ghemawat, G. Irving, M. Isard, M. Kudlur, J. Levenberg, R. Monga, S. Moore, D. G. Murray, B. Steiner, P. Tucker, V. Vasudevan, P. Warden, M. Wicke, W. Yu, and X. Zheng. Tensorflow: A system for large-scale machine learning. In 12th USENIX Symposium on Operating Systems Design and Implementation (OSDI 16), pp. 265\u2013283, 2016. URL https://www.usenix.org/system/files/conference/osdi16/osdi16-abadi.pdf.",
            "url": "https://www.usenix.org/system/files/conference/osdi16/osdi16-abadi.pdf",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Abadi%2C%20M.%20Barham%2C%20P.%20Chen%2C%20J.%20Chen%2C%20Z.%20Tensorflow%3A%20A%20system%20for%20large-scale%20machine%20learning%202016"
        },
        {
            "id": "Avancini_2013_a",
            "entry": "A. Avancini and M. Ceccato. Comparison and integration of genetic algorithms and dynamic symbolic execution for security testing of cross-site scripting vulnerabilities. Information and Software Technology, 55(12):2209\u20132222, 2013.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Avancini%2C%20A.%20Ceccato%2C%20M.%20Comparison%20and%20integration%20of%20genetic%20algorithms%20and%20dynamic%20symbolic%20execution%20for%20security%20testing%20of%20cross-site%20scripting%20vulnerabilities%202013",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Avancini%2C%20A.%20Ceccato%2C%20M.%20Comparison%20and%20integration%20of%20genetic%20algorithms%20and%20dynamic%20symbolic%20execution%20for%20security%20testing%20of%20cross-site%20scripting%20vulnerabilities%202013"
        },
        {
            "id": "Cadar_2013_a",
            "entry": "C. Cadar and K. Sen. Symbolic execution for software testing: three decades later. Communications of the ACM, 56(2):82\u201390, 2013.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Cadar%2C%20C.%20Sen%2C%20K.%20Symbolic%20execution%20for%20software%20testing%3A%20three%20decades%20later%202013",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Cadar%2C%20C.%20Sen%2C%20K.%20Symbolic%20execution%20for%20software%20testing%3A%20three%20decades%20later%202013"
        },
        {
            "id": "Cozzie_et+al_2008_a",
            "entry": "A. Cozzie, F. Stratton, H. Xue, and S. T. King. Digging for data structures. In OSDI, volume 8, pp. 255\u2013266, 2008.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Cozzie%2C%20A.%20Stratton%2C%20F.%20Xue%2C%20H.%20King%2C%20S.T.%20Digging%20for%20data%20structures%202008",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Cozzie%2C%20A.%20Stratton%2C%20F.%20Xue%2C%20H.%20King%2C%20S.T.%20Digging%20for%20data%20structures%202008"
        },
        {
            "id": "Dam_et+al_2017_a",
            "entry": "H. K. Dam, T. Tran, T. Pham, N. S. Wee, J. Grundy, and A. Ghose. Automatic feature learning for vulnerability prediction. CoRR, abs/1708.02368, 2017.",
            "arxiv_url": "https://arxiv.org/pdf/1708.02368"
        },
        {
            "id": "Dowd_et+al_2006_a",
            "entry": "M. Dowd, J. McDonald, and J. Schuh. The Art of Software Security Assessment: Identifying and Preventing Software Vulnerabilities. Addison-Wesley Professional, 2006. ISBN 0321444426.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Dowd%2C%20M.%20McDonald%2C%20J.%20Schuh%2C%20J.%20The%20Art%20of%20Software%20Security%20Assessment%3A%20Identifying%20and%20Preventing%20Software%20Vulnerabilities%202006",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Dowd%2C%20M.%20McDonald%2C%20J.%20Schuh%2C%20J.%20The%20Art%20of%20Software%20Security%20Assessment%3A%20Identifying%20and%20Preventing%20Software%20Vulnerabilities%202006"
        },
        {
            "id": "Ghaffarian_2017_a",
            "entry": "S. M. Ghaffarian and H. R. Shahriari. Software vulnerability analysis and discovery using machinelearning and data-mining techniques: A survey. ACM Computing Surveys (CSUR), 50(4):56, 2017.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Ghaffarian%2C%20S.M.%20Shahriari%2C%20H.R.%20Software%20vulnerability%20analysis%20and%20discovery%20using%20machinelearning%20and%20data-mining%20techniques%3A%20A%20survey%202017",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Ghaffarian%2C%20S.M.%20Shahriari%2C%20H.R.%20Software%20vulnerability%20analysis%20and%20discovery%20using%20machinelearning%20and%20data-mining%20techniques%3A%20A%20survey%202017"
        },
        {
            "id": "Gretton_et+al_2012_a",
            "entry": "A. Gretton, K. Borgwardt, M. Rasch, B. Scholkopf, and A. Smola. A kernel two-sample test. Journal of Machine Learning Research, 13:723\u2013773, March 2012.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Gretton%2C%20A.%20Borgwardt%2C%20K.%20Rasch%2C%20M.%20Scholkopf%2C%20B.%20A%20kernel%20two-sample%20test%202012-03",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Gretton%2C%20A.%20Borgwardt%2C%20K.%20Rasch%2C%20M.%20Scholkopf%2C%20B.%20A%20kernel%20two-sample%20test%202012-03"
        },
        {
            "id": "Grieco_et+al_2016_a",
            "entry": "G. Grieco, G. L. Grinblat, L. Uzal, S. Rawat, J. Feist, and L. Mounier. Toward large-scale vulnerability discovery using machine learning. In Proceedings of the Sixth ACM Conference on Data and Application Security and Privacy, CODASPY \u201916, pp. 85\u201396, 2016. ISBN 978-14503-3935-3.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Grieco%2C%20G.%20Grinblat%2C%20G.L.%20Uzal%2C%20L.%20Rawat%2C%20S.%20Toward%20large-scale%20vulnerability%20discovery%20using%20machine%20learning%202016",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Grieco%2C%20G.%20Grinblat%2C%20G.L.%20Uzal%2C%20L.%20Rawat%2C%20S.%20Toward%20large-scale%20vulnerability%20discovery%20using%20machine%20learning%202016"
        },
        {
            "id": "Kim_et+al_2017_a",
            "entry": "S. Kim, S. Woo, H. Lee, and H. Oh. VUDDY: A scalable approach for vulnerable code clone discovery. In IEEE Symposium on Security and Privacy, pp. 595\u2013614. IEEE Computer Society, 2017.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Kim%2C%20S.%20Woo%2C%20S.%20Lee%2C%20H.%20Oh%2C%20H.%20VUDDY%3A%20A%20scalable%20approach%20for%20vulnerable%20code%20clone%20discovery%202017",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Kim%2C%20S.%20Woo%2C%20S.%20Lee%2C%20H.%20Oh%2C%20H.%20VUDDY%3A%20A%20scalable%20approach%20for%20vulnerable%20code%20clone%20discovery%202017"
        },
        {
            "id": "Kingma_2014_a",
            "entry": "D. P. Kingma and J. Ba. Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980, 2014.",
            "arxiv_url": "https://arxiv.org/pdf/1412.6980"
        },
        {
            "id": "Kingma_2013_a",
            "entry": "D. P. Kingma and M. Welling. Auto-encoding variational bayes. arXiv preprint arXiv:1312.6114, 2013.",
            "arxiv_url": "https://arxiv.org/pdf/1312.6114"
        },
        {
            "id": "Le_2014_a",
            "entry": "Q. V. Le and T. Mikolov. Distributed representations of sentences and documents. In International on Machine Learning 2014, volume 32 of JMLR Workshop and Conference Proceedings, pp. 1188\u20131196. JMLR.org, 2014.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Le%2C%20Q.V.%20Mikolov%2C%20T.%20Distributed%20representations%20of%20sentences%20and%20documents%202014",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Le%2C%20Q.V.%20Mikolov%2C%20T.%20Distributed%20representations%20of%20sentences%20and%20documents%202014"
        },
        {
            "id": "Li_et+al_2016_a",
            "entry": "Z. Li, D. Zou, S. Xu, H. Jin, H. Qi, and J. Hu. VulPecker: An automated vulnerability detection system based on code similarity analysis. In Proceedings of the 32nd Annual Conference on Computer Security Applications, ACSAC \u201916, pp. 201\u2013213, 2016. ISBN 978-1-4503-4771-6.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Li%2C%20Z.%20Zou%2C%20D.%20Xu%2C%20S.%20Jin%2C%20H.%20VulPecker%3A%20An%20automated%20vulnerability%20detection%20system%20based%20on%20code%20similarity%20analysis%202016",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Li%2C%20Z.%20Zou%2C%20D.%20Xu%2C%20S.%20Jin%2C%20H.%20VulPecker%3A%20An%20automated%20vulnerability%20detection%20system%20based%20on%20code%20similarity%20analysis%202016"
        },
        {
            "id": "Li_et+al_2018_a",
            "entry": "Z. Li, D. Zou, S. Xu, X. Ou, H. Jin, S. Wang, Z. Deng, and Y. Zhong. VulDeePecker: A deep learning-based system for vulnerability detection. CoRR, abs/1801.01681, 2018.",
            "arxiv_url": "https://arxiv.org/pdf/1801.01681"
        },
        {
            "id": "Lin_et+al_2018_a",
            "entry": "G. Lin, J. Zhang, W. Luo, L. Pan, Y. Xiang, O. De Vel, and P. Montague. Cross-project transfer representation learning for vulnerable function discovery. In IEEE Transactions on Industrial Informatics, 2018.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Lin%2C%20G.%20Zhang%2C%20J.%20Luo%2C%20W.%20Pan%2C%20L.%20Cross-project%20transfer%20representation%20learning%20for%20vulnerable%20function%20discovery%202018",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Lin%2C%20G.%20Zhang%2C%20J.%20Luo%2C%20W.%20Pan%2C%20L.%20Cross-project%20transfer%20representation%20learning%20for%20vulnerable%20function%20discovery%202018"
        },
        {
            "id": "Meng_et+al_2016_a",
            "entry": "Q. Meng, S. Wen, B. Zhang, and C. Tang. Automatically discover vulnerability through similar functions. In Progress in Electromagnetic Research Symposium (PIERS), pp. 3657\u20133661. IEEE, 2016.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Meng%2C%20Q.%20Wen%2C%20S.%20Zhang%2C%20B.%20Tang%2C%20C.%20Automatically%20discover%20vulnerability%20through%20similar%20functions%202016",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Meng%2C%20Q.%20Wen%2C%20S.%20Zhang%2C%20B.%20Tang%2C%20C.%20Automatically%20discover%20vulnerability%20through%20similar%20functions%202016"
        },
        {
            "id": "Neuhaus_et+al_2007_a",
            "entry": "S. Neuhaus, T. Zimmermann, C. Holler, and A. Zeller. Predicting vulnerable software components. In Proceedings of the 14th ACM Conference on Computer and Communications Security, CCS \u201907, pp. 529\u2013540, 2007. ISBN 978-1-59593-703-2.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Neuhaus%2C%20S.%20Zimmermann%2C%20T.%20Holler%2C%20C.%20Zeller%2C%20A.%20Predicting%20vulnerable%20software%20components%202007",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Neuhaus%2C%20S.%20Zimmermann%2C%20T.%20Holler%2C%20C.%20Zeller%2C%20A.%20Predicting%20vulnerable%20software%20components%202007"
        },
        {
            "id": "Raff_et+al_2017_a",
            "entry": "E. Raff, J. Barker, J. Sylvester, R. Brandon, B. Catanzaro, and C. Nicholas. Malware detection by eating a whole exe. arXiv preprint arXiv:1710.09435, 2017.",
            "arxiv_url": "https://arxiv.org/pdf/1710.09435"
        },
        {
            "id": "Saxe_2015_a",
            "entry": "J. Saxe and K. Berlin. Deep neural network based malware detection using two dimensional binary program features. In Malicious and Unwanted Software (MALWARE), 2015 10th International Conference on, pp. 11\u201320. IEEE, 2015.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Saxe%2C%20J.%20Berlin%2C%20K.%20Deep%20neural%20network%20based%20malware%20detection%20using%20two%20dimensional%20binary%20program%20features%202015",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Saxe%2C%20J.%20Berlin%2C%20K.%20Deep%20neural%20network%20based%20malware%20detection%20using%20two%20dimensional%20binary%20program%20features%202015"
        },
        {
            "id": "Shin_et+al_2011_a",
            "entry": "Y. Shin, A. Meneely, L. Williams, and J A Osborne. Evaluating complexity, code churn, and developer activity metrics as indicators of software vulnerabilities. IEEE Transactions on Software Engineering, 37(6):772\u2013787, 2011.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Shin%2C%20Y.%20Meneely%2C%20A.%20Williams%2C%20L.%20Osborne%2C%20J.A.%20Evaluating%20complexity%2C%20code%20churn%2C%20and%20developer%20activity%20metrics%20as%20indicators%20of%20software%20vulnerabilities%202011",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Shin%2C%20Y.%20Meneely%2C%20A.%20Williams%2C%20L.%20Osborne%2C%20J.A.%20Evaluating%20complexity%2C%20code%20churn%2C%20and%20developer%20activity%20metrics%20as%20indicators%20of%20software%20vulnerabilities%202011"
        },
        {
            "id": "Yamaguchi_et+al_2011_a",
            "entry": "F. Yamaguchi, F. Lindner, and K. Rieck. Vulnerability extrapolation: assisted discovery of vulnerabilities using machine learning. In Proceedings of the 5th USENIX conference on Offensive technologies, pp. 13\u201323, 2011.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Yamaguchi%2C%20F.%20Lindner%2C%20F.%20Rieck%2C%20K.%20Vulnerability%20extrapolation%3A%20assisted%20discovery%20of%20vulnerabilities%20using%20machine%20learning%202011",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Yamaguchi%2C%20F.%20Lindner%2C%20F.%20Rieck%2C%20K.%20Vulnerability%20extrapolation%3A%20assisted%20discovery%20of%20vulnerabilities%20using%20machine%20learning%202011"
        }
    ]
}
