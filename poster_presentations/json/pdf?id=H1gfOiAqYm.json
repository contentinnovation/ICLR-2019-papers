{
    "filename": "pdf.pdf",
    "metadata": {
        "title": "EXECUTION-GUIDED NEURAL PROGRAM SYNTHESIS",
        "author": "Xinyun Chen UC Berkeley",
        "date": 2019,
        "identifiers": {
            "url": "https://openreview.net/pdf?id=H1gfOiAqYm"
        },
        "abstract": "Neural program synthesis from input-output examples has attracted an increasing interest from both the machine learning and the programming language community. Most existing neural program synthesis approaches employ an encoder-decoder architecture, which uses an encoder to compute the embedding of the given inputoutput examples, as well as a decoder to generate the program from the embedding following a given syntax. Although such approaches achieve a reasonable performance on simple tasks such as FlashFill, on more complex tasks such as Karel, the state-of-the-art approach can only achieve an accuracy of around 77%. We observe that the main drawback of existing approaches is that the semantic information is greatly under-utilized. In this work, we propose two simple yet principled techniques to better leverage the semantic information, which are execution-guided synthesis and synthesizer ensemble. These techniques are general enough to be combined with any existing encoder-decoder-style neural program synthesizer. Applying our techniques to the Karel dataset, we can boost the accuracy from around 77% to more than 90%."
    },
    "keywords": [
        {
            "term": "programming language",
            "url": "https://en.wikipedia.org/wiki/programming_language"
        },
        {
            "term": "neural network",
            "url": "https://en.wikipedia.org/wiki/neural_network"
        },
        {
            "term": "synthesis",
            "url": "https://en.wikipedia.org/wiki/synthesis"
        },
        {
            "term": "domain-specific language",
            "url": "https://en.wikipedia.org/wiki/domain-specific_language"
        },
        {
            "term": "program synthesis",
            "url": "https://en.wikipedia.org/wiki/program_synthesis"
        }
    ],
    "abbreviations": {
        "DSL": "domain-specific language"
    },
    "highlights": [
        "This shows that our approach is effective in boosting the performance of algorithms for neural program synthesis from input-output examples",
        "Program synthesis is a traditional challenging problem. Such a problem typically takes a specification as the input, and the goal is to generate a program within a target domain-specific language (DSL)",
        "In light of this observation, in this work, we develop simple yet principled techniques that can be combined with any existing encoder-decoder-style neural program synthesizers",
        "We propose a simple yet effective technique called synthesizer ensemble, which leverages the semantic information to ensemble multiple neural program synthesizers",
        "We propose two general and principled techniques to better leverage the semantic information for neural program synthesis: (1) execution-guided synthesis; and (2) synthesizer ensemble",
        "On a rich domain-specific language with complex control flows, we achieve a significant performance gain over the existing work, which demonstrates that utilizing the semantic information is crucial in boosting the performance of neural program synthesis approaches"
    ],
    "key_statements": [
        "This shows that our approach is effective in boosting the performance of algorithms for neural program synthesis from input-output examples",
        "Program synthesis is a traditional challenging problem. Such a problem typically takes a specification as the input, and the goal is to generate a program within a target domain-specific language (DSL)",
        "Devlin et al have demonstrated that using an encoder-decoderstyle neural network, their neural program synthesis algorithm called RobustFill can outperform the performance of the traditional non-neural program synthesis approach by a large margin on the FlashFill task (<a class=\"ref-link\" id=\"cDevlin_et+al_2017_b\" href=\"#rDevlin_et+al_2017_b\">Devlin et al, 2017b</a>)",
        "We identify several inefficiencies of such encoder-decoder-style neural program synthesis approaches",
        "In light of this observation, in this work, we develop simple yet principled techniques that can be combined with any existing encoder-decoder-style neural program synthesizers",
        "We propose a simple yet effective technique called synthesizer ensemble, which leverages the semantic information to ensemble multiple neural program synthesizers",
        "We observe that our proposed techniques can gain better performance than the previous state-of-the-art results. By combining both of our techniques, we can achieve an accuracy of 92%, which is around 15 percentage points better than the state-of-the-art results. This shows that our approach is effective in boosting the performance of algorithms for neural program synthesis from input-output examples.\n2 NEURAL PROGRAM SYNTHESIS FROM INPUT-OUPUT EXAMPLES",
        "AN OVERVIEW OF OUR APPROACHES In this work, we propose two general and principled techniques that can improve the performance over existing work, which are execution-guided synthesis (Section 3) and synthesizer ensemble (Section 4)",
        "We decouple the full programs in the original training dataset into small pieces, our synthesizer \u0393 is trained with segments of the original training programs instead of the full programs",
        "Our synthesizer is more capable of generating programs piece-by-piece and tends to generate semantically correct programs rather than the same programs in the training and testing sets",
        "For real-world applications, the generalization accuracy is more important than the exact match accuracy, because exact match accuracy is more about evaluating how well the synthesizer recovers the language model of the pCFG sampler used to generate the dataset",
        "We propose two general and principled techniques to better leverage the semantic information for neural program synthesis: (1) execution-guided synthesis; and (2) synthesizer ensemble",
        "On a rich domain-specific language with complex control flows, we achieve a significant performance gain over the existing work, which demonstrates that utilizing the semantic information is crucial in boosting the performance of neural program synthesis approaches"
    ],
    "summary": [
        "This shows that our approach is effective in boosting the performance of algorithms for neural program synthesis from input-output examples.",
        "2.3 AN OVERVIEW OF OUR APPROACHES In this work, we propose two general and principled techniques that can improve the performance over existing work, which are execution-guided synthesis (Section 3) and synthesizer ensemble (Section 4).",
        "Existing approaches generate the entire program only based on the input-output examples before execution.",
        "Note that in line 5-6, synthesizing both true-branch and false-branch employ execution-guided synthesis algorithm to leverage intermediate states, and different ending tokens are supplied respectively.",
        "Note that our execution-guided synthesis algorithm can be applied to any neural synthesizer \u0393, and we can train the synthesizer \u0393 using any supervised or reinforcement learning algorithms that have been proposed before (<a class=\"ref-link\" id=\"cDevlin_et+al_2017_b\" href=\"#rDevlin_et+al_2017_b\"><a class=\"ref-link\" id=\"cDevlin_et+al_2017_b\" href=\"#rDevlin_et+al_2017_b\">Devlin et al, 2017b</a></a>; <a class=\"ref-link\" id=\"cBunel_et+al_2018_a\" href=\"#rBunel_et+al_2018_a\"><a class=\"ref-link\" id=\"cBunel_et+al_2018_a\" href=\"#rBunel_et+al_2018_a\"><a class=\"ref-link\" id=\"cBunel_et+al_2018_a\" href=\"#rBunel_et+al_2018_a\"><a class=\"ref-link\" id=\"cBunel_et+al_2018_a\" href=\"#rBunel_et+al_2018_a\">Bunel et al, 2018</a></a></a></a>).",
        "We demonstrate that our execution-guided synthesis technique helps boost the performance of both supervised and reinforcement learning algorithms proposed in existing work (<a class=\"ref-link\" id=\"cBunel_et+al_2018_a\" href=\"#rBunel_et+al_2018_a\"><a class=\"ref-link\" id=\"cBunel_et+al_2018_a\" href=\"#rBunel_et+al_2018_a\"><a class=\"ref-link\" id=\"cBunel_et+al_2018_a\" href=\"#rBunel_et+al_2018_a\"><a class=\"ref-link\" id=\"cBunel_et+al_2018_a\" href=\"#rBunel_et+al_2018_a\">Bunel et al, 2018</a></a></a></a>).",
        "To train the synthesizer \u0393 with our Exec algorithm in the supervised learning setting, we need the supervision on intermediate states as well, which can be obtained by executing the ground truth programs following the semantics (Table 2).",
        "We observe that our execution-guided synthesis alone can significantly improve the generalization accuracy over all approaches from (<a class=\"ref-link\" id=\"cBunel_et+al_2018_a\" href=\"#rBunel_et+al_2018_a\"><a class=\"ref-link\" id=\"cBunel_et+al_2018_a\" href=\"#rBunel_et+al_2018_a\"><a class=\"ref-link\" id=\"cBunel_et+al_2018_a\" href=\"#rBunel_et+al_2018_a\"><a class=\"ref-link\" id=\"cBunel_et+al_2018_a\" href=\"#rBunel_et+al_2018_a\">Bunel et al, 2018</a></a></a></a>), even after we accompany their approaches with our ensemble techniques.",
        "Our execution-guided synthesis technique can effectively improve previous approaches, which only use the syntactic information, or the final program execution outputs.",
        "3. The different modules of our proposed approaches, i.e., execution-guided synthesis and ensemble techniques, can work independently to improve the performance, and they can be applied independently to other tasks as well.",
        "Recent work study using neural networks to generate programs in a domain-specific language (DSL) from a few input-output examples (<a class=\"ref-link\" id=\"cDevlin_et+al_2017_b\" href=\"#rDevlin_et+al_2017_b\"><a class=\"ref-link\" id=\"cDevlin_et+al_2017_b\" href=\"#rDevlin_et+al_2017_b\">Devlin et al, 2017b</a></a>; <a class=\"ref-link\" id=\"cBunel_et+al_2018_a\" href=\"#rBunel_et+al_2018_a\"><a class=\"ref-link\" id=\"cBunel_et+al_2018_a\" href=\"#rBunel_et+al_2018_a\"><a class=\"ref-link\" id=\"cBunel_et+al_2018_a\" href=\"#rBunel_et+al_2018_a\"><a class=\"ref-link\" id=\"cBunel_et+al_2018_a\" href=\"#rBunel_et+al_2018_a\">Bunel et al, 2018</a></a></a></a>; <a class=\"ref-link\" id=\"cParisotto_et+al_2017_a\" href=\"#rParisotto_et+al_2017_a\">Parisotto et al, 2017</a>; <a class=\"ref-link\" id=\"cPolosukhin_2018_a\" href=\"#rPolosukhin_2018_a\">Polosukhin & Skidanov, 2018</a>; <a class=\"ref-link\" id=\"cZohar_2018_a\" href=\"#rZohar_2018_a\">Zohar & Wolf, 2018</a>).",
        "We propose two general and principled techniques to better leverage the semantic information for neural program synthesis: (1) execution-guided synthesis; and (2) synthesizer ensemble.",
        "On a rich DSL with complex control flows, we achieve a significant performance gain over the existing work, which demonstrates that utilizing the semantic information is crucial in boosting the performance of neural program synthesis approaches.",
        "We believe that there is plenty of room left for further improvement, and we are interested in exploring this problem in the future"
    ],
    "headline": "We propose two simple yet principled techniques to better leverage the semantic information, which are execution-guided synthesis and synthesizer ensemble",
    "reference_links": [
        {
            "id": "Balog_et+al_2017_a",
            "entry": "Matej Balog, Alexander L Gaunt, Marc Brockschmidt, Sebastian Nowozin, and Daniel Tarlow. Deepcoder: Learning to write programs. In ICLR, 2017.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Balog%2C%20Matej%20Gaunt%2C%20Alexander%20L.%20Brockschmidt%2C%20Marc%20Nowozin%2C%20Sebastian%20Deepcoder%3A%20Learning%20to%20write%20programs%202017",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Balog%2C%20Matej%20Gaunt%2C%20Alexander%20L.%20Brockschmidt%2C%20Marc%20Nowozin%2C%20Sebastian%20Deepcoder%3A%20Learning%20to%20write%20programs%202017"
        },
        {
            "id": "Bunel_et+al_2018_a",
            "entry": "Rudy Bunel, Matthew Hausknecht, Jacob Devlin, Rishabh Singh, and Pushmeet Kohli. Leveraging grammar and reinforcement learning for neural program synthesis. In International Conference on Learning Representations, 2018.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Bunel%2C%20Rudy%20Hausknecht%2C%20Matthew%20Devlin%2C%20Jacob%20Singh%2C%20Rishabh%20Leveraging%20grammar%20and%20reinforcement%20learning%20for%20neural%20program%20synthesis%202018",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Bunel%2C%20Rudy%20Hausknecht%2C%20Matthew%20Devlin%2C%20Jacob%20Singh%2C%20Rishabh%20Leveraging%20grammar%20and%20reinforcement%20learning%20for%20neural%20program%20synthesis%202018"
        },
        {
            "id": "Cai_et+al_2017_a",
            "entry": "Jonathon Cai, Richard Shin, and Dawn Song. Making neural programming architectures generalize via recursion. In ICLR, 2017.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Cai%2C%20Jonathon%20Shin%2C%20Richard%20Song%2C%20Dawn%20Making%20neural%20programming%20architectures%20generalize%20via%20recursion%202017",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Cai%2C%20Jonathon%20Shin%2C%20Richard%20Song%2C%20Dawn%20Making%20neural%20programming%20architectures%20generalize%20via%20recursion%202017"
        },
        {
            "id": "Chen_et+al_2018_a",
            "entry": "Xinyun Chen, Chang Liu, and Dawn Song. Towards synthesizing complex programs from inputoutput examples. In ICLR, 2018.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Chen%2C%20Xinyun%20Liu%2C%20Chang%20Song%2C%20Dawn%20Towards%20synthesizing%20complex%20programs%20from%20inputoutput%20examples%202018",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Chen%2C%20Xinyun%20Liu%2C%20Chang%20Song%2C%20Dawn%20Towards%20synthesizing%20complex%20programs%20from%20inputoutput%20examples%202018"
        },
        {
            "id": "Cs_2018_a",
            "entry": "CS106A. Stanford cs106a course page. https://see.stanford.edu/Course/CS106A, 2018.",
            "url": "https://see.stanford.edu/Course/CS106A"
        },
        {
            "id": "Devlin_et+al_2017_a",
            "entry": "Jacob Devlin, Rudy R Bunel, Rishabh Singh, Matthew Hausknecht, and Pushmeet Kohli. Neural program meta-induction. In Advances in Neural Information Processing Systems, pp. 2077\u20132085, 2017a.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Jacob%20Devlin%20Rudy%20R%20Bunel%20Rishabh%20Singh%20Matthew%20Hausknecht%20and%20Pushmeet%20Kohli%20Neural%20program%20metainduction%20In%20Advances%20in%20Neural%20Information%20Processing%20Systems%20pp%2020772085%202017a",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Jacob%20Devlin%20Rudy%20R%20Bunel%20Rishabh%20Singh%20Matthew%20Hausknecht%20and%20Pushmeet%20Kohli%20Neural%20program%20metainduction%20In%20Advances%20in%20Neural%20Information%20Processing%20Systems%20pp%2020772085%202017a"
        },
        {
            "id": "Devlin_et+al_2017_b",
            "entry": "Jacob Devlin, Jonathan Uesato, Surya Bhupatiraju, Rishabh Singh, Abdel-rahman Mohamed, and Pushmeet Kohli. Robustfill: Neural program learning under noisy I/O. In ICML, 2017b.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Devlin%2C%20Jacob%20Uesato%2C%20Jonathan%20Bhupatiraju%2C%20Surya%20Singh%2C%20Rishabh%20Robustfill%3A%20Neural%20program%20learning%20under%20noisy%20I/O%202017",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Devlin%2C%20Jacob%20Uesato%2C%20Jonathan%20Bhupatiraju%2C%20Surya%20Singh%2C%20Rishabh%20Robustfill%3A%20Neural%20program%20learning%20under%20noisy%20I/O%202017"
        },
        {
            "id": "Fox_et+al_2018_a",
            "entry": "Roy Fox, Richard Shin, Sanjay Krishnan, Ken Goldberg, Dawn Song, and Ion Stoica. Parametrized hierarchical procedures for neural programming. In ICLR, 2018.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Fox%2C%20Roy%20Shin%2C%20Richard%20Krishnan%2C%20Sanjay%20Goldberg%2C%20Ken%20Parametrized%20hierarchical%20procedures%20for%20neural%20programming%202018",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Fox%2C%20Roy%20Shin%2C%20Richard%20Krishnan%2C%20Sanjay%20Goldberg%2C%20Ken%20Parametrized%20hierarchical%20procedures%20for%20neural%20programming%202018"
        },
        {
            "id": "Ganin_et+al_2018_a",
            "entry": "Yaroslav Ganin, Tejas Kulkarni, Igor Babuschkin, SM Eslami, and Oriol Vinyals. Synthesizing programs for images using reinforced adversarial learning. arXiv preprint arXiv:1804.01118, 2018.",
            "arxiv_url": "https://arxiv.org/pdf/1804.01118"
        },
        {
            "id": "Graves_et+al_2014_a",
            "entry": "Alex Graves, Greg Wayne, and Ivo Danihelka. Neural turing machines. arXiv preprint arXiv:1410.5401, 2014.",
            "arxiv_url": "https://arxiv.org/pdf/1410.5401"
        },
        {
            "id": "Gulwani_2011_a",
            "entry": "Sumit Gulwani. Automating string processing in spreadsheets using input-output examples. In ACM SIGPLAN Notices, volume 46, pp. 317\u2013330. ACM, 2011.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Gulwani%2C%20Sumit%20Automating%20string%20processing%20in%20spreadsheets%20using%20input-output%20examples%202011",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Gulwani%2C%20Sumit%20Automating%20string%20processing%20in%20spreadsheets%20using%20input-output%20examples%202011"
        },
        {
            "id": "Gulwani_et+al_2012_a",
            "entry": "Sumit Gulwani, William R Harris, and Rishabh Singh. Spreadsheet data manipulation using examples. Communications of the ACM, 55(8):97\u2013105, 2012.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Gulwani%2C%20Sumit%20Harris%2C%20William%20R.%20Singh%2C%20Rishabh%20Spreadsheet%20data%20manipulation%20using%20examples%202012",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Gulwani%2C%20Sumit%20Harris%2C%20William%20R.%20Singh%2C%20Rishabh%20Spreadsheet%20data%20manipulation%20using%20examples%202012"
        },
        {
            "id": "Hoc_2018_a",
            "entry": "HoC. Hour of code. https://codehs.com/hourofcode/, 2018.",
            "url": "https://codehs.com/hourofcode/"
        },
        {
            "id": "Joulin_2015_a",
            "entry": "Armand Joulin and Tomas Mikolov. Inferring algorithmic patterns with stack-augmented recurrent nets. In NIPS, 2015.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Joulin%2C%20Armand%20Mikolov%2C%20Tomas%20Inferring%20algorithmic%20patterns%20with%20stack-augmented%20recurrent%20nets%202015",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Joulin%2C%20Armand%20Mikolov%2C%20Tomas%20Inferring%20algorithmic%20patterns%20with%20stack-augmented%20recurrent%20nets%202015"
        },
        {
            "id": "Kaiser_2015_a",
            "entry": "\u0141ukasz Kaiser and Ilya Sutskever. Neural gpus learn algorithms. arXiv preprint arXiv:1511.08228, 2015.",
            "arxiv_url": "https://arxiv.org/pdf/1511.08228"
        },
        {
            "id": "Kingma_2015_a",
            "entry": "Diederik P Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In ICLR, 2015.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Kingma%2C%20Diederik%20P.%20Ba%2C%20Jimmy%20Adam%3A%20A%20method%20for%20stochastic%20optimization%202015",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Kingma%2C%20Diederik%20P.%20Ba%2C%20Jimmy%20Adam%3A%20A%20method%20for%20stochastic%20optimization%202015"
        },
        {
            "id": "Li_et+al_2017_a",
            "entry": "Chengtao Li, Daniel Tarlow, Alexander Gaunt, Marc Brockschmidt, and Nate Kushman. Neural program lattices. In ICLR, 2017.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Chengtao%20Li%20Daniel%20Tarlow%20Alexander%20Gaunt%20Marc%20Brockschmidt%20and%20Nate%20Kushman%20Neural%20program%20lattices%20In%20ICLR%202017",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Chengtao%20Li%20Daniel%20Tarlow%20Alexander%20Gaunt%20Marc%20Brockschmidt%20and%20Nate%20Kushman%20Neural%20program%20lattices%20In%20ICLR%202017"
        },
        {
            "id": "Parisotto_et+al_2017_a",
            "entry": "Emilio Parisotto, Abdel-rahman Mohamed, Rishabh Singh, Lihong Li, Dengyong Zhou, and Pushmeet Kohli. Neuro-symbolic program synthesis. In ICLR, 2017.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Parisotto%2C%20Emilio%20Mohamed%2C%20Abdel-rahman%20Singh%2C%20Rishabh%20Li%2C%20Lihong%20Neuro-symbolic%20program%20synthesis%202017",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Parisotto%2C%20Emilio%20Mohamed%2C%20Abdel-rahman%20Singh%2C%20Rishabh%20Li%2C%20Lihong%20Neuro-symbolic%20program%20synthesis%202017"
        },
        {
            "id": "Pattis_1981_a",
            "entry": "Richard E Pattis. Karel the robot: a gentle introduction to the art of programming. John Wiley & Sons, Inc., 1981.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Pattis%2C%20Richard%20E.%20Karel%20the%20robot%3A%20a%20gentle%20introduction%20to%20the%20art%20of%20programming%201981"
        },
        {
            "id": "Polosukhin_2018_a",
            "entry": "Illia Polosukhin and Alexander Skidanov. Neural program search: Solving programming tasks from description and examples. arXiv preprint arXiv:1802.04335, 2018.",
            "arxiv_url": "https://arxiv.org/pdf/1802.04335"
        },
        {
            "id": "Rabinovich_et+al_2017_a",
            "entry": "Maxim Rabinovich, Mitchell Stern, and Dan Klein. Abstract syntax networks for code generation and semantic parsing. In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), volume 1, pp. 1139\u20131149, 2017.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Rabinovich%2C%20Maxim%20Stern%2C%20Mitchell%20Klein%2C%20Dan%20Abstract%20syntax%20networks%20for%20code%20generation%20and%20semantic%20parsing%202017",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Rabinovich%2C%20Maxim%20Stern%2C%20Mitchell%20Klein%2C%20Dan%20Abstract%20syntax%20networks%20for%20code%20generation%20and%20semantic%20parsing%202017"
        },
        {
            "id": "Reed_2016_a",
            "entry": "Scott Reed and Nando De Freitas. Neural programmer-interpreters. In ICLR, 2016.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Scott%20Reed%20and%20Nando%20De%20Freitas%20Neural%20programmerinterpreters%20In%20ICLR%202016",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Scott%20Reed%20and%20Nando%20De%20Freitas%20Neural%20programmerinterpreters%20In%20ICLR%202016"
        },
        {
            "id": "Shin_et+al_2018_a",
            "entry": "Richard Shin, Illia Polosukhin, and Dawn Song. Towards specification-directed program repair. 2018.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Shin%2C%20Richard%20Polosukhin%2C%20Illia%20Song%2C%20Dawn%20Towards%20specification-directed%20program%20repair%202018"
        },
        {
            "id": "Sun_et+al_2018_a",
            "entry": "Shao-Hua Sun, Hyeonwoo Noh, Sriram Somasundaram, and Joseph Lim. Neural program synthesis from diverse demonstration videos. In International Conference on Machine Learning, pp. 4797\u2013 4806, 2018.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Sun%2C%20Shao-Hua%20Noh%2C%20Hyeonwoo%20Somasundaram%2C%20Sriram%20Lim%2C%20Joseph%20Neural%20program%20synthesis%20from%20diverse%20demonstration%20videos%202018",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Sun%2C%20Shao-Hua%20Noh%2C%20Hyeonwoo%20Somasundaram%2C%20Sriram%20Lim%2C%20Joseph%20Neural%20program%20synthesis%20from%20diverse%20demonstration%20videos%202018"
        },
        {
            "id": "Vijayakumar_et+al_2018_a",
            "entry": "Ashwin J Vijayakumar, Abhishek Mohta, Oleksandr Polozov, Dhruv Batra, Prateek Jain, and Sumit Gulwani. Neural-guided deductive search for real-time program synthesis from examples. In ICLR, 2018.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Vijayakumar%2C%20Ashwin%20J.%20Mohta%2C%20Abhishek%20Polozov%2C%20Oleksandr%20Batra%2C%20Dhruv%20Neural-guided%20deductive%20search%20for%20real-time%20program%20synthesis%20from%20examples%202018",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Vijayakumar%2C%20Ashwin%20J.%20Mohta%2C%20Abhishek%20Polozov%2C%20Oleksandr%20Batra%2C%20Dhruv%20Neural-guided%20deductive%20search%20for%20real-time%20program%20synthesis%20from%20examples%202018"
        },
        {
            "id": "Wang_et+al_0000_a",
            "entry": "Chenglong Wang, Kedar Tatwawadi, Marc Brockschmidt, Po-Sen Huang, Yi Mao, Oleksandr Polozov, and Rishabh Singh. Robust text-to-sql generation with execution-guided decoding. arXiv preprint arXiv:1807.03100, 2018a.",
            "arxiv_url": "https://arxiv.org/pdf/1807.03100"
        },
        {
            "id": "Wang_et+al_2018_a",
            "entry": "Ke Wang, Rishabh Singh, and Zhendong Su. Dynamic neural program embedding for program repair. In ICLR, 2018b.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Wang%2C%20Ke%20Singh%2C%20Rishabh%20Su%2C%20Zhendong%20Dynamic%20neural%20program%20embedding%20for%20program%20repair%202018",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Wang%2C%20Ke%20Singh%2C%20Rishabh%20Su%2C%20Zhendong%20Dynamic%20neural%20program%20embedding%20for%20program%20repair%202018"
        },
        {
            "id": "Xiao_et+al_2018_a",
            "entry": "Da Xiao, Jo-Yu Liao, and Xingyuan Yuan. Improving the universality and learnability of neural programmer-interpreters with combinator abstraction. In ICLR, 2018.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Xiao%2C%20Da%20Liao%2C%20Jo-Yu%20Yuan%2C%20Xingyuan%20Improving%20the%20universality%20and%20learnability%20of%20neural%20programmer-interpreters%20with%20combinator%20abstraction%202018",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Xiao%2C%20Da%20Liao%2C%20Jo-Yu%20Yuan%2C%20Xingyuan%20Improving%20the%20universality%20and%20learnability%20of%20neural%20programmer-interpreters%20with%20combinator%20abstraction%202018"
        },
        {
            "id": "Xu_et+al_2017_a",
            "entry": "Xiaojun Xu, Chang Liu, and Dawn Song. Sqlnet: Generating structured queries from natural language without reinforcement learning. arXiv preprint arXiv:1711.04436, 2017.",
            "arxiv_url": "https://arxiv.org/pdf/1711.04436"
        },
        {
            "id": "Yin_2017_a",
            "entry": "Pengcheng Yin and Graham Neubig. A syntactic neural model for general-purpose code generation. In ACL, 2017.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Yin%2C%20Pengcheng%20Neubig%2C%20Graham%20A%20syntactic%20neural%20model%20for%20general-purpose%20code%20generation%202017",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Yin%2C%20Pengcheng%20Neubig%2C%20Graham%20A%20syntactic%20neural%20model%20for%20general-purpose%20code%20generation%202017"
        },
        {
            "id": "Zaremba_2015_a",
            "entry": "Wojciech Zaremba and Ilya Sutskever. Reinforcement learning neural turing machines-revised. arXiv preprint arXiv:1505.00521, 2015.",
            "arxiv_url": "https://arxiv.org/pdf/1505.00521"
        },
        {
            "id": "Zaremba_et+al_2016_a",
            "entry": "Wojciech Zaremba, Tomas Mikolov, Armand Joulin, and Rob Fergus. Learning simple algorithms from examples. In Proceedings of The 33rd International Conference on Machine Learning, pp. 421\u2013429, 2016.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Zaremba%2C%20Wojciech%20Mikolov%2C%20Tomas%20Joulin%2C%20Armand%20Fergus%2C%20Rob%20Learning%20simple%20algorithms%20from%20examples%202016",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Zaremba%2C%20Wojciech%20Mikolov%2C%20Tomas%20Joulin%2C%20Armand%20Fergus%2C%20Rob%20Learning%20simple%20algorithms%20from%20examples%202016"
        },
        {
            "id": "Zohar_2018_a",
            "entry": "Amit Zohar and Lior Wolf. Automatic program synthesis of long programs with a learned garbage collector. In Advances in Neural Information Processing Systems, pp. 2094\u20132103, 2018.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Zohar%2C%20Amit%20Wolf%2C%20Lior%20Automatic%20program%20synthesis%20of%20long%20programs%20with%20a%20learned%20garbage%20collector%202018",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Zohar%2C%20Amit%20Wolf%2C%20Lior%20Automatic%20program%20synthesis%20of%20long%20programs%20with%20a%20learned%20garbage%20collector%202018"
        }
    ]
}
